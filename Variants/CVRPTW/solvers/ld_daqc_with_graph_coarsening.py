# -*- coding: utf-8 -*-
"""LD-DAQC with Graph coarsening for CVRPTW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uaW23FrK2PRbELmHDmAI0Ec1-CnCUOQZ
"""

!pip install qiskit qiskit-aer

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
import time
import random

def load_and_prepare_data(file_path, vehicle_capacity):
    try:
        df = pd.read_csv(file_path)
    except FileNotFoundError:
        print(f"Error: Dataset file not found at '{file_path}'. Using dummy data.")
        data = {'CUST_NO.': range(101), 'XCOORD.': np.random.randint(-50, 50, 101), 'YCOORD.': np.random.randint(-50, 50, 101), 'DEMAND': np.random.randint(5, 25, 101), 'READY_TIME': np.random.randint(0, 400, 101), 'DUE_DATE': np.random.randint(500, 1000, 101), 'SERVICE_TIME': np.full(101, 10)}
        df = pd.DataFrame(data)
        df.loc[0, ['XCOORD.', 'YCOORD.', 'DEMAND', 'READY_TIME', 'DUE_DATE', 'SERVICE_TIME']] = 0
        df.loc[0, 'DUE_DATE'] = 10000
    total_customers = df.shape[0] - 1
    coords = df[['XCOORD.', 'YCOORD.']].values
    dist_matrix = np.sqrt(((coords[:, np.newaxis, :] - coords[np.newaxis, :, :]) ** 2).sum(axis=2))
    params = {"dataframe": df, "distance_matrix": dist_matrix, "demands": df['DEMAND'].values, "ready_times": df['READY_TIME'].values, "due_dates": df['DUE_DATE'].values, "service_times": df['SERVICE_TIME'].values, "total_customers": total_customers, "vehicle_capacity": vehicle_capacity}
    return params

def get_route_cost_and_feasibility(route, params):
    dist, time = 0.0, 0.0
    for i in range(len(route) - 1):
        u, v = route[i], route[i+1]
        dist += params['distance_matrix'][u, v]
        arrival_time = time + params['service_times'][u] + params['distance_matrix'][u, v]
        if arrival_time > params['due_dates'][v]: return None, None
        time = max(arrival_time, params['ready_times'][v])
    return dist, time

def solve_tsptw_with_insertion(customers, params):
    route, unrouted = [0, 0], list(customers)
    while unrouted:
        best_insertion_cost, best_customer, best_position = float('inf'), None, None
        for customer in unrouted:
            for i in range(len(route) - 1):
                u, v = route[i], route[i+1]
                cost_change = params['distance_matrix'][u, customer] + params['distance_matrix'][customer, v] - params['distance_matrix'][u, v]
                if cost_change < best_insertion_cost:
                    temp_route = route[:i+1] + [customer] + route[i+1:]
                    if get_route_cost_and_feasibility(temp_route, params)[1] is not None:
                        best_insertion_cost, best_customer, best_position = cost_change, customer, i + 1
        if best_customer is not None:
            route.insert(best_position, best_customer); unrouted.remove(best_customer)
        else: return None, None
    return get_route_cost_and_feasibility(route, params)[0], route

def adiabatic_schedule(t, T, a=0):
    tau = t / T
    return tau + a * tau * (tau - 0.5) * (tau - 1)

def calculate_hamiltonian_coeffs(subproblem_customers, params, lam1, quadratic_weight):
    n_qubits = len(subproblem_customers)
    linear_coeffs = np.array([params["distance_matrix"][0, cid] + lam1 * params["demands"][cid] for cid in subproblem_customers])
    quadratic_coeffs = np.zeros((n_qubits, n_qubits))
    for i in range(n_qubits):
        for j in range(i + 1, n_qubits):
            cust_i = subproblem_customers[i]
            cust_j = subproblem_customers[j]
            quadratic_coeffs[i, j] = quadratic_weight * params["distance_matrix"][cust_i, cust_j]
    return linear_coeffs, quadratic_coeffs

def calculate_trotter_angles(linear_coeffs, quadratic_coeffs, k, p, T):
    n_qubits = len(linear_coeffs)
    delta_t = T / p
    norm_h_init = np.sqrt(2 * n_qubits)
    norm_h_p = np.sqrt(np.sum(linear_coeffs**2) + np.sum(quadratic_coeffs**2))
    tk = (k + 1) * delta_t
    sk = adiabatic_schedule(tk, T)
    gamma_k = (1 - sk) * delta_t / norm_h_init
    beta_k = sk * delta_t / norm_h_p if norm_h_p > 0 else 0
    return gamma_k, beta_k

def build_ld_daqc_layer(gamma_k, beta_k, linear_coeffs, quadratic_coeffs, n_qubits):
    qc = QuantumCircuit(n_qubits)
    for j in range(n_qubits): qc.rz(2 * beta_k * linear_coeffs[j], j)
    for i in range(n_qubits):
        for j in range(i + 1, n_qubits):
            if quadratic_coeffs[i, j] != 0: qc.rzz(2 * beta_k * quadratic_coeffs[i, j], i, j)
    for j in range(n_qubits): qc.rx(2 * gamma_k, j)
    if n_qubits > 1:
        for j in range(n_qubits): qc.rxx(2 * gamma_k, j, (j + 1) % n_qubits)
    return qc

def build_ld_daqc_circuit(p_layers, T_time, linear_coeffs, quadratic_coeffs, n_qubits):
    qc = QuantumCircuit(n_qubits)
    for k in range(p_layers):
        gamma_k, beta_k = calculate_trotter_angles(linear_coeffs, quadratic_coeffs, k, p_layers, T_time)
        layer = build_ld_daqc_layer(gamma_k, beta_k, linear_coeffs, quadratic_coeffs, n_qubits)
        qc.compose(layer, inplace=True)
    qc.measure_all()
    return qc

def coarsen_graph(params, cluster_radius):
    print(f"Coarsening graph with radius {cluster_radius} and capacity constraint.")

    unvisited = set(range(1, params['total_customers'] + 1))
    clusters = {}
    supernode_id_counter = 1
    vehicle_capacity = params['vehicle_capacity']

    while unvisited:
        seed_cust = min(unvisited, key=lambda c: params['due_dates'][c])
        unvisited.remove(seed_cust)

        new_cluster = {seed_cust}
        current_demand = params['demands'][seed_cust]

        nearby_customers = sorted(
            [c for c in unvisited if params['distance_matrix'][seed_cust, c] <= cluster_radius],
            key=lambda c: params['distance_matrix'][seed_cust, c]
        )

        for cust in nearby_customers:
            if current_demand + params['demands'][cust] <= vehicle_capacity:
                new_cluster.add(cust)
                unvisited.remove(cust)
                current_demand += params['demands'][cust]

        clusters[supernode_id_counter] = list(new_cluster)
        supernode_id_counter += 1

    print(f"Original problem size: {params['total_customers']} -> Coarsened size: {len(clusters)}")

    num_supernodes = len(clusters)
    coarse_params = {"total_customers": num_supernodes, "vehicle_capacity": params["vehicle_capacity"], 'cluster_map': clusters}
    supernode_coords = [params['dataframe'][['XCOORD.', 'YCOORD.']].values[0]]
    supernode_demands = [0]
    for sid in sorted(clusters.keys()):
        original_cust_ids = clusters[sid]
        avg_coord = np.mean(params['dataframe'][['XCOORD.', 'YCOORD.']].iloc[original_cust_ids], axis=0)
        supernode_coords.append(avg_coord)
        total_demand = np.sum(params['demands'][original_cust_ids])
        supernode_demands.append(total_demand)
    supernode_coords = np.array(supernode_coords)
    coarse_dist_matrix = np.sqrt(((supernode_coords[:, np.newaxis, :] - supernode_coords[np.newaxis, :, :]) ** 2).sum(axis=2))
    coarse_params['distance_matrix'] = coarse_dist_matrix
    coarse_params['demands'] = np.array(supernode_demands)
    coarse_params['ready_times'] = np.zeros(num_supernodes + 1)
    coarse_params['due_dates'] = np.full(num_supernodes + 1, 1e9)
    coarse_params['service_times'] = np.zeros(num_supernodes + 1)
    return coarse_params

def uncoarsen_and_refine_solution(coarse_routes, coarse_params, original_params):
    print("\n Uncoarsening solution and refining routes.")
    final_routes = []
    for coarse_route in coarse_routes:
        customers_in_route = []
        for supernode_id in coarse_route:
            if supernode_id != 0:
                customers_in_route.extend(coarse_params['cluster_map'][supernode_id])
        if customers_in_route:
            _, refined_route = solve_tsptw_with_insertion(customers_in_route, original_params)
            if refined_route:
                final_routes.append(refined_route)
    return final_routes

def solve_with_quantum_greedy(params, p, T, lam1, quadratic_weight, backend, subproblem_size_limit):
    unserved_customers = set(range(1, params["total_customers"] + 1))
    final_routes = []

    while unserved_customers:
        print(f"\n Quantum Decision Step. Remaining customers: {len(unserved_customers)} ")

        subproblem_customers = sorted(list(unserved_customers))[:subproblem_size_limit]
        qubit_map = {i: cust_id for i, cust_id in enumerate(subproblem_customers)}
        n_qubits = len(subproblem_customers)

        linear_coeffs, quadratic_coeffs = calculate_hamiltonian_coeffs(subproblem_customers, params, lam1, quadratic_weight)
        circuit = build_ld_daqc_circuit(p, T, linear_coeffs, quadratic_coeffs, n_qubits)
        result = backend.run(transpile(circuit, backend), shots=2048).result()
        counts = result.get_counts()

        best_route_found, best_cost_found = None, float('inf')
        for bitstring in sorted(counts, key=counts.get, reverse=True)[:100]:
            selected_qubits = [i for i, bit in enumerate(reversed(bitstring)) if bit == '1']
            current_selection = [qubit_map[i] for i in selected_qubits]

            if not current_selection or sum(params['demands'][c] for c in current_selection) > params['vehicle_capacity']:
                continue

            cost, route = solve_tsptw_with_insertion(current_selection, params)
            if route and cost < best_cost_found:
                best_cost_found = cost
                best_route_found = route

        if best_route_found and len(best_route_found) > 3:
            final_routes.append(best_route_found)
            served = {c for c in best_route_found if c != 0}
            unserved_customers -= served
        else:
            best_single_cust = None
            for cust in sorted(list(unserved_customers), key=lambda c: params['due_dates'][c]):
                if params['demands'][cust] <= params['vehicle_capacity']:
                    best_single_cust = cust
                    break

            if best_single_cust is not None:
                route = [0, best_single_cust, 0]
                final_routes.append(route)
                unserved_customers.remove(best_single_cust)
                cost, _ = get_route_cost_and_feasibility(route, params)
            else:
                break

    total_cost = sum(get_route_cost_and_feasibility(r, params)[0] for r in final_routes)
    return final_routes, total_cost

def solve_with_multilevel_quantum(params, p, T, lam1, quadratic_weight, backend, subproblem_size_limit, cluster_radius):
    coarse_params = coarsen_graph(params, cluster_radius)
    print("\n Solving the coarsened problem with the quantum solver.")
    coarse_solution_routes, _ = solve_with_quantum_greedy(
        coarse_params, p, T, lam1, quadratic_weight, backend, subproblem_size_limit
    )
    final_routes = uncoarsen_and_refine_solution(coarse_solution_routes, coarse_params, params)
    total_cost = sum(get_route_cost_and_feasibility(r, params)[0] for r in final_routes)
    return final_routes, total_cost

def visualize_routes(routes, params, title="CVRPTW Solution"):
    plt.style.use('seaborn-v0_8-whitegrid')
    fig, ax = plt.subplots(figsize=(14, 14))
    coords = params['dataframe'][['XCOORD.', 'YCOORD.']].values
    ax.scatter(coords[1:, 0], coords[1:, 1], c='silver', label='Customers', s=50, zorder=3)
    ax.scatter(coords[0, 0], coords[0, 1], c='red', marker='*', s=300, label='Depot', zorder=5)
    colors = plt.cm.gist_rainbow(np.linspace(0, 1, len(routes)))
    for i, route in enumerate(routes):
        route_color = colors[i]
        for j in range(len(route) - 1):
            u, v = route[j], route[j+1]
            ax.plot([coords[u, 0], coords[v, 0]], [coords[u, 1], coords[v, 1]], color=route_color, linewidth=2, alpha=0.8)
        ax.plot([], [], color=route_color, label=f'Vehicle {i+1}')
    for i in range(1, len(coords)):
        ax.text(coords[i, 0], coords[i, 1] + 1, str(i), fontsize=9, ha='center')
    ax.set_title(title, fontsize=18, fontweight='bold')
    ax.set_xlabel("X Coordinate", fontsize=12)
    ax.set_ylabel("Y Coordinate", fontsize=12)
    ax.legend(loc='upper right', fontsize=10)
    ax.grid(True)
    plt.show()

if __name__ == "__main__":
    FILE_PATH, VEHICLE_CAPACITY = 'c101.csv', 200
    SUBPROBLEM_QUBIT_LIMIT = 22
    T_evolution_time, p_layers = 10, 5
    LAMBDA_1, quadratic_weight = 0.4, 1.0
    CLUSTER_RADIUS = 15.0

    problem_params = load_and_prepare_data(FILE_PATH, VEHICLE_CAPACITY)
    qiskit_backend = AerSimulator()

    print(f"Starting Multi-Level Quantum Solver with Graph Coarsening")

    final_routes, total_cost = solve_with_multilevel_quantum(
        params=problem_params, p=p_layers, T=T_evolution_time,
        lam1=LAMBDA_1, quadratic_weight=quadratic_weight,
        backend=qiskit_backend, subproblem_size_limit=SUBPROBLEM_QUBIT_LIMIT,
        cluster_radius=CLUSTER_RADIUS
    )

    print("\n\n FINAL SOLUTION (Multi-Level Quantum Solver)")
    print(f"Number of Vehicles: {len(final_routes)}")
    print(f"Total Solution Cost: {total_cost:.2f}")
    print("\n Vehicle Routes")
    if final_routes:
        for i, r in enumerate(final_routes):
            cost, _ = get_route_cost_and_feasibility(r, problem_params)
            demand = sum(problem_params['demands'][c] for c in r)
            print(f"  Vehicle {i+1}: {r}")
            print(f"    Cost: {cost:.2f}, Demand: {demand}/{VEHICLE_CAPACITY}\n")
    else:
        print("No routes were found.")

    print("\n Visualizing the final routes.")
    visualize_routes(final_routes, problem_params,
                     f"Multi-Level Quantum Solution (Cost: {total_cost:.2f}, Vehicles: {len(final_routes)})")